import{jsx as _jsx}from"react/jsx-runtime";import{useEffect,useState}from"react";import{createStore}from"https://framer.com/m/framer/store.js@^1.0.0";import{useAnimation,useMotionValue}from"framer-motion";// Learn more: https://www.framer.com/docs/guides/overrides/
const useStore=createStore({isDragged:false,isPlaying:true,isSpeedSetting:false,x:0,y:0,speed:1});export function withRotate(Component){return props=>{const[store,setStore]=useStore();return /*#__PURE__*/ _jsx(Component,{...props,animate:{rotate:store.x}});};}export function withLens(Component){return props=>{const[store,setStore]=useStore();return /*#__PURE__*/ _jsx(Component,{...props,animate:{opacity:store.isDragged?1:0}});};}export function withHover(Component){return props=>{return /*#__PURE__*/ _jsx(Component,{...props,whileHover:{scale:1.05}});};}export function withPlayIcon(Component){return props=>{const[store,setStore]=useStore();return /*#__PURE__*/ _jsx(Component,{...props,variant:store.isPlaying?"Pause":"Play"});};}export function withLottie(Component){return props=>{const[store,setStore]=useStore();return /*#__PURE__*/ _jsx(Component,{...props,playing:store.isPlaying,speed:store.speed});};}export function withPressed(Component){return props=>{return /*#__PURE__*/ _jsx(Component,{...props,style:{scale:.2},whileTap:{scale:1}});};}export function withSlider(Component){return props=>{const[store,setStore]=useStore();const{isDragged}=store;return /*#__PURE__*/ _jsx(Component,{...props,animate:{scale:isDragged?1:.3,rotate:store.x}});};}function useDebounce(value,delay){// State and setters for debounced value
const[debouncedValue,setDebouncedValue]=useState(value);useEffect(()=>{// Update debounced value after delay
const handler=setTimeout(()=>{setDebouncedValue(value);},delay);// Cancel the timeout if value changes (also on delay change or unmount)
// This is how we prevent debounced value from updating if value is changed ...
// .. within the delay period. Timeout gets cleared and restarted.
return()=>{clearTimeout(handler);};},[value,delay] // Only re-call effect if value or delay changes
);return debouncedValue;}export function withDrag(Component){return props=>{const[store,setStore]=useStore();const controls=useAnimation();const x=useMotionValue(0);const y=useMotionValue(0);const debouncedX=useDebounce(x.get(),100);// Effect for API call
useEffect(()=>{const speed=debouncedX/100*-2+1;setStore({x:debouncedX,speed});},[debouncedX] // Only call effect if debounced
);console.log({xGet:x.get()});return /*#__PURE__*/ _jsx(Component,{...props,drag:true,animate:controls,dragElastic:false,onTapStart:()=>{setStore({isSpeedSetting:false});},onTap:()=>{if(!store.isSpeedSetting){setStore({isPlaying:!store.isPlaying});}setStore({isDragged:false});controls.start({x:0,y:0,opacity:1});},onTapCancel:()=>{setStore({isDragged:false});controls.start({x:0,y:0,opacity:1});},onDrag:(e,info)=>{x.set(info.offset.x);y.set(info.offset.y);if(Math.abs(x.get())>10||Math.abs(y.get())>10){if(!store.isSpeedSetting){setStore({isDragged:true,isSpeedSetting:true});controls.start({opacity:0});}}},dragConstraints:{top:-100,bottom:100,left:-100,right:100},onDragEnd:()=>{setStore({isDragged:false});controls.start({x:0,y:0,opacity:1});}});};}
export const __FramerMetadata__ = {"exports":{"withPressed":{"type":"reactHoc","name":"withPressed","annotations":{"framerContractVersion":"1"}},"withHover":{"type":"reactHoc","name":"withHover","annotations":{"framerContractVersion":"1"}},"withLottie":{"type":"reactHoc","name":"withLottie","annotations":{"framerContractVersion":"1"}},"withSlider":{"type":"reactHoc","name":"withSlider","annotations":{"framerContractVersion":"1"}},"withRotate":{"type":"reactHoc","name":"withRotate","annotations":{"framerContractVersion":"1"}},"withDrag":{"type":"reactHoc","name":"withDrag","annotations":{"framerContractVersion":"1"}},"withLens":{"type":"reactHoc","name":"withLens","annotations":{"framerContractVersion":"1"}},"withPlayIcon":{"type":"reactHoc","name":"withPlayIcon","annotations":{"framerContractVersion":"1"}},"__FramerMetadata__":{"type":"variable"}}}
//# sourceMappingURL=./Slider.map